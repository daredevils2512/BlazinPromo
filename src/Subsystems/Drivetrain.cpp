// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Drivetrain.h"
#include "../RobotMap.h"
#include "../Commands/Drive.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Drivetrain::Drivetrain() : Subsystem("Drivetrain") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    frontLeftMotor = RobotMap::drivetrainFrontLeftMotor;
    rearLeftMotor = RobotMap::drivetrainRearLeftMotor;
    frontRightMotor = RobotMap::drivetrainFrontRightMotor;
    rearRightMotor = RobotMap::drivetrainRearRightMotor;
    chassis = RobotMap::drivetrainchassis;
    leftEncoder = RobotMap::drivetrainLeftEncoder;
    rightEncoder = RobotMap::drivetrainRightEncoder;
    shift = RobotMap::drivetrainShift;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    blockJoysticks = false;
}

void Drivetrain::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new Drive());
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Drivetrain::DriveRobot(double move, double turn) {
	//drives robot in arcade mode using specified values
	chassis->ArcadeDrive(move, turn, false);
}

void Drivetrain::AutonTankDrive(double left, double right) {
	//drives robot in tank mode using specified values
	chassis->TankDrive(left, right);
}

void Drivetrain::ResetEncoders() {
	//resets encoders on drivetrain
	leftEncoder->Reset();
	rightEncoder->Reset();
}

bool Drivetrain::CheckDistance(double distance) {
	//checks to see if the average encoder values have reached the desired distance
	//used for autonomous
	double leftDistance = fabs(leftEncoder->GetDistance());
	double rightDistance = fabs(rightEncoder->GetDistance());
	// check if one encoder is lagging behind or cut out
	//this is in case one encoder is cut or damaged, we average the distances
	//later, so this keeps the robot from going twice as far to get to the same distance
	if(fabs(leftDistance - rightDistance) > 2) {
		//set lagging encoder to value of other encoder
		if(leftDistance > rightDistance) {
			rightDistance = leftDistance;
		}else{
			leftDistance = rightDistance;
		}
	}
	//check if the average encoder distance has exceeded the desired distance
	if(((leftDistance + rightDistance) / 2) > distance) {
		return true;
	}else{
		return false;
	}
}

void Drivetrain::SetAutonomous(bool isAutonomous) {
	blockJoysticks = isAutonomous;
}

bool Drivetrain::GetAutonomous() {
	return blockJoysticks;
}

void Drivetrain::Shift(frc::DoubleSolenoid::Value direction){
	shift->Set(direction);
}

